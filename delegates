
    using System;    
    namespace ConsoleApplication5    
    {    
    class Program    
    {    
    public delegate void delmethod();    
      
    public class P    
    {  
      
    public static void display()    
    {    
    Console.WriteLine("Hello!");    
    }    
      
    public static void show()    
    {    
    Console.WriteLine("Hi!");    
    }    
      
    public void print()
    {
    Console.WriteLine("Print");
    }

    }
      
    static void Main(string[] args)
    {
    // here we have assigned static method show() of class P to delegate delmethod()
    delmethod del1 = P.show;
      
    // here we have assigned static method display() of class P to delegate delmethod() using new operator
    // you can use both ways to assign the delagate
    delmethod del2 = new delmethod(P.display);
    P obj = new P();
      
    // here first we have create instance of class P and assigned the method print() to the delegate i.e. delegate with class    
    delmethod del3 = obj.print;
      
    del1();
    del2();
    del3();
    Console.ReadLine();
    }
    }
    }
    
    
    
    
    
    
    
    
    
    
    
    MULTIPLE
    
    
    using System;  
    namespace delegate_Example4  
    {  
      
    class Program  
    {  
    public delegate void delmethod(int x, int y);  
      
    public class TestMultipleDelegate  
    {  
    public void plus_Method1(int x, int y)  
    {  
    Console.Write("You are in plus_Method");  
    Console.WriteLine(x + y);  
    }  
      
    public void subtract_Method2(int x, int y)  
    {  
    Console.Write("You are in subtract_Method");  
    Console.WriteLine(x - y);  
    }  
    }  
      
    static void Main(string[] args)  
    {  
      
    TestMultipleDelegate obj = new TestMultipleDelegate();  
    delmethod del = new delmethod(obj.plus_Method1);  
      
    // Here we have multicast  
    del += new delmethod(obj.subtract_Method2);  
    // plus_Method1 and subtract_Method2 are called  
    del(50, 10);  
    Console.WriteLine();  
    //Here again we have multicast  
    del -= new delmethod(obj.plus_Method1);  
    //Only subtract_Method2 is called  
    del(20, 10);  
    Console.ReadLine();  
    }  
    }  
    }  
    
    
    
    
    //events
    
    
    using System;  
namespace delegate_custom  
{  
class Program  
{  
public delegate void MyDelegate(int a);  
  
public class XX  
{  
public event MyDelegate MyEvent;  
  
public void RaiseEvent()  
{  
MyEvent(20);  
Console.WriteLine("Event Raised");  
}  
  
public void Display(int x)  
{  
Console.WriteLine("Display Method {0}", x);  
}  
}  
  
static void Main(string[] args)  
{  
  
XX obj = new XX();  
obj.MyEvent += new MyDelegate(obj.Display);  
  
obj.RaiseEvent();  
Console.ReadLine();  
}  
}  
} 


7th cuboid

using System;  
class Demo{
    public delegate void cube(int a);
     public delegate void cuboid(int a,int b,int c);
     public void c1(int a){
         Console.WriteLine(a*a*a);
     }
     public void c2(int a,int b,int c){
         Console.WriteLine(a*b*c);
     }
      public static void Main(){
         Demo d=new Demo();
         cube obj1=new cube(d.c1);
         cuboid obj2=new cuboid(d.c2);
         obj1(5);
         obj2(5,3,2);
     }
    
}
    
    
    
